return {
  -- "ravitemer/mcphub.nvim",
  -- dependencies = {
  --   "nvim-lua/plenary.nvim", -- Required for Job and HTTP requests
  --   "yetone/avante.nvim",    -- Required for Job and HTTP requests
  -- },
  -- -- cmd = "MCPHub", -- lazily start the hub when `MCPHub` is called
  -- build = "npm install -g mcp-hub@latest", -- Installs required mcp-hub npm module
  -- config = function()
  --   require("mcphub").setup({
  --     -- Required options
  --     port = 3000,                                 -- Port for MCP Hub server
  --     config = vim.fn.expand("~/mcpservers.json"), -- Absolute path to config file
  --
  --     -- Optional options
  --     on_ready = function(hub)
  --       -- Called when hub is ready
  --     end,
  --     on_error = function(err)
  --       -- Called on errors
  --     end,
  --     log = {
  --       level = vim.log.levels.WARN,
  --       to_file = false,
  --       file_path = nil,
  --       prefix = "MCPHub"
  --     },
  --   })
  --   require("avante").setup({
  --     -- other config
  --     -- The system_prompt type supports both a string and a function that returns a string. Using a function here allows dynamically updating the prompt with mcphub
  --     system_prompt = function()
  --       local hub = require("mcphub").get_hub_instance()
  --       return hub:get_active_servers_prompt()
  --     end,
  --     -- The custom_tools type supports both a list and a function that returns a list. Using a function here prevents requiring mcphub before it's loaded
  --     custom_tools = function()
  --       return {
  --         require("mcphub.extensions.avante").mcp_tool(),
  --       }
  --     end,
  --   })
  -- end
}
