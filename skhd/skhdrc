# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# close window
#alt - w : yabai -m window --close
alt - w : \
    nextwinid=$(bash -c 'yabai -m query --windows --window east 2>/dev/null || yabai -m query --windows --window west 2>/dev/null' | jq -r .id) \
    bash -c 'yabai -m window --close && yabai -m window --focus $nextwinid'

# focus window
alt - h : yabai -m window --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - l : yabai -m window --focus east

# swap managed window
shift + ctrl + cmd - h : yabai -m window --swap north

# move managed window
#shift + cmd - h : yabai -m window --warp west
#shift + cmd - j : yabai -m window --warp south
#shift + cmd - k : yabai -m window --warp north
#shift + cmd - l : yabai -m window --warp east

# balance size of windows
shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
cmd + alt - t   : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
cmd + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# fast focus desktop
# cmd + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window split type
# alt - e : yabai -m window --toggle split

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip

#shift + cmd - n : yabai -m space --create && index="$(yabai -m query --spaces --display | jq '.| length')" && yabai -m window --space "${index}" && yabai -m space --focus "${index}"

# destroy desktop and goto recent space
# force refresh space bar
alt - q : index="$(yabai -m query --spaces --space | jq '.index')" && \
                yabai -m space --focus recent && \
                yabai -m space "${index}" --destroy && \
                spacebar -m config spaces on

# create desktop and follow focus - uses jq for parsing json (brew install jq)
alt - c : ~/.config/yabai/create_new_space.sh

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
alt + ctrl - c : ~/.config/yabai/create_new_space.sh 1

# fast focus desktop(切换空间焦点)
alt - tab : yabai -m space --focus recent
alt - n : yabai -m space --focus next || yabai -m space --focus first
alt - p : yabai -m space --focus prev || yabai -m space --focus last
alt - 1 : yabai -m space --focus 1
alt - 2 : yabai -m space --focus 2
alt - 3 : yabai -m space --focus 3
alt - 4 : yabai -m space --focus 4
alt - 5 : yabai -m space --focus 5
alt - 6 : yabai -m space --focus 6
alt - 7 : yabai -m space --focus 7
alt - 8 : yabai -m space --focus 8
alt - 9 : yabai -m space --focus 9
alt - 0 : yabai -m space --focus 10

# send window to desktop and follow focus(将当前活跃窗口发送到指定空间)
ctrl + alt - tab : yabai -m window --space recent; yabai -m space --focus recent
ctrl + alt - n : (yabai -m window --space next && yabai -m space --focus next) \
	|| (yabai -m window --space first && yabai -m space --focus first)
ctrl + alt - p : (yabai -m window --space prev && yabai -m space --focus prev) \
	|| (yabai -m window --space last && yabai -m space --focus last)
ctrl + alt - 1 : yabai -m window --space  1; yabai -m space --focus 1
ctrl + alt - 2 : yabai -m window --space  2; yabai -m space --focus 2
ctrl + alt - 3 : yabai -m window --space  3; yabai -m space --focus 3
ctrl + alt - 4 : yabai -m window --space  4; yabai -m space --focus 4
ctrl + alt - 5 : yabai -m window --space  5; yabai -m space --focus 5
ctrl + alt - 6 : yabai -m window --space  6; yabai -m space --focus 6
ctrl + alt - 7 : yabai -m window --space  7; yabai -m space --focus 7
ctrl + alt - 8 : yabai -m window --space  8; yabai -m space --focus 8
ctrl + alt - 9 : yabai -m window --space  9; yabai -m space --focus 9
ctrl + alt - 0 : yabai -m window --space 10; yabai -m space --focus 10

# focus monitor(切换显示器焦点)
# ctrl + alt - x  : yabai -m display --focus recent
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - c  : yabai -m display --focus next
#ctrl + alt - 1  : yabai -m display --focus 1
#ctrl + alt - 2  : yabai -m display --focus 2
#ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus(将当前活跃窗口发送到指定显示器)
# ctrl + cmd - x  : yabai -m window --display recent; yabai -m display --focus recent
# ctrl + cmd - z  : yabai -m window --display prev; yabai -m display --focus prev
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
#ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1
#ctrl + cmd - 2  : yabai -m window --display 2; yabai -m display --focus 2
#ctrl + cmd - 3  : yabai -m window --display 3; yabai -m display --focus 3

# move window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20
# shift + ctrl - w : yabai -m window --move rel:0:-20
# shift + ctrl - d : yabai -m window --move rel:20:0

# increase window size(增加窗口大小aswd)
ctrl + shift - left  : yabai -m window --resize left:-20:0
ctrl + shift - up: yabai -m window --resize top:0:-20
ctrl + shift - right  : yabai -m window --resize right:20:0
ctrl + shift - down: yabai -m window --resize bottom:0:20

# rotate tree(逆时针旋转空间多个窗口)
alt - r : yabai -m space --rotate 90

# mirror tree y-axis(纵轴调换窗口)
alt - y : yabai -m space --mirror y-axis

# mirror tree x-axis(横轴调换窗口)
#alt - x : yabai -m space --mirror x-axis

# toggle desktop offset
alt - a : yabai -m space --toggle padding; yabai -m space --toggle gap

# toggle window parent zoom
# alt - d : yabai -m window --toggle zoom-parent


# toggle window fullscreen zoom(单个窗口进入或退出全屏)
alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window native fullscreen(单个窗口进入或退出真全屏-上方的icon都会消失)
shift + alt - f : yabai -m window --toggle native-fullscreen

# toggle window border
shift + alt - b : yabai -m window --toggle border

# toggle window split type(切换分割方式)
alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen(控制窗口是否进入float模式,进入的话就不会自动被排列)
alt - t : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2
#alt - t : ~/.config/yabai/toggle-window-floating-tiling.sh

# toggle sticky (show on all spaces)
# alt - s : yabai -m window --toggle sticky

# toggle topmost (keep above other windows)
alt - o : yabai -m window --toggle topmost

# toggle sticky(+float), topmost, border and picture-in-picture
#alt - p : yabai -m window --toggle sticky;\
          #yabai -m window --toggle topmost;
          #yabai -m window --toggle border;\
          # yabai -m window --toggle pip

# change layout of desktop(更换layout方式)
ctrl + alt - a : yabai -m space --layout bsp
ctrl + alt - d : yabai -m space --layout float


# Stack
# 就用两个映射吧，alt - s进入或者退出stack，alt - d 切换到下一个stack
#alt - s : ${HOME}/.config/yabai/toggle-window-bsp-stack.sh
#alt - d : yabai -m window --focus stack.next || yabai -m window --focus stack.first

