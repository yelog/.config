# Download Znap, if it's not there yet.
[[ -r ~/Repos/znap/znap.zsh ]] ||
    git clone --depth 1 -- \
        https://github.com/marlonrichert/zsh-snap.git ~/Repos/znap
source ~/Repos/znap/znap.zsh  # Start Znap

# CodeWhisperer pre block. Keep at the top of this file.
[[ -f "${HOME}/Library/Application Support/codewhisperer/shell/zshrc.pre.zsh" ]] && builtin source "${HOME}/Library/Application Support/codewhisperer/shell/zshrc.pre.zsh"
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
#ZSH_THEME="robbyrussell"
ZSH_THEME="powerlevel10k/powerlevel10k"

#ZSH_THEME="awesomepanda"

# Set list of themes to load
# Setting this variable when ZSH_THEME=random
# cause zsh load theme from this variable instead of
# looking in ~/.oh-my-zsh/themes/
# An empty array have no effect
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
git
# zsh-autosuggestions
history-substring-search
zsh-syntax-highlighting
sudo
z
npm
extract
vi-mode
kubectl
copybuffer # ctrl + o copy command buffer to clipboard
dirhistory # alt + left and right goto previous and next directory
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
#source ~/.bash_profile
source ~/.bashrc
bindkey "[D" backward-word
bindkey "[C" forward-word
setopt no_nomatch

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="$PATH:$HOME/.rvm/bin"
autoload -U compinit
compinit

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh



KEYTIMEOUT=1

export PUB_HOSTED_URL=https://pub.flutter-io.cn
export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="$PATH:$HOME/.rvm/bin"

# ctn auto complete
#complete -W "$(docker ps --format"{{.Names}}")" ctn

# hexo
blogPath='/Users/yelog/myspace/blog/source/_posts'
function hs() {
  # clean dir
  rm -rf $blogPath/*
  mkdir -p $blogPath
  # find and cp blog to dir
  find /Users/yelog/Library/Mobile\ Documents/iCloud\~md\~obsidian/Documents -name "*.md" -type f -exec sh -c 'head -n 2 "{}" | grep -A1 "^---$" | grep -q "^title:" && ln -s "{}" ~/myspace/blog/source/_posts/' \;
  # find /Users/yelog/Library/Mobile\ Documents/iCloud\~md\~obsidian/Documents -name "*.md" -type f -exec sh -c 'head -n 2 "{}" | grep -A1 "^---$" | grep -q "^title:" && ln -s "{}" "~/myspace/blog/source/_posts/$(basename "{}")"' \;
  # find /Users/yelog/Library/Mobile\ Documents/iCloud\~md\~obsidian/Documents -name "*.md" -type f -exec sh -c 'head -n 2 "{}" | grep -A1 "^---$" | grep -q "^title:" && echo "~/myspace/blog/source/_posts/$(basename "{}")"' \;
  hexo clean
  hexo g
  hexo s
}
function hd() {
  # clean dir
  rm -rf $blogPath/*
  mkdir -p $blogPath
  # find and cp blog to dir
  find /Users/yelog/Library/Mobile\ Documents/iCloud\~md\~obsidian/Documents -name "*.md" -type f -exec sh -c 'head -n 2 "{}" | grep -A1 "^---$" | grep -q "^title:" && cp "{}" ~/myspace/blog/source/_posts/' \;
  hexo clean
  hexo g
  hexo d
  git add .
  git commit -m "update"
  git push -f
}
# alias hs="hexo clean && hexo g && hexo s"
# alias hd='hexo clean && hexo g && hexo d && git add . && git commit -m "update" && git push -f'
alias tailf='tail -f'
# alias ra=joshuto
alias ra=yazi
alias s=neofetch
alias chrome=open -a "Google Chrome"
alias vi=nvim
alias v=nvim
alias sudo='sudo '
alias lg=lazygit
alias j=z
alias ls='eza --icons -lh --time-style=iso'
alias scp='rsync -P --rsh=ssh'
# alias python=/Library/Frameworks/Python.framework/Versions/3.11/bin/python3.11
# export PYTHON_HOME=/Library/Frameworks/Python.framework/Versions/3.11
# export PATH=$PATH:$PYTHON_HOME/bin
# 如果没有参数 打印当前上下文，如果有参数，设置为当前上下文
alias kc='kubeSetConfig(){ if [ ! -n "$1" ]; then kubectl config current-context; else cat $1 > $HOME/.kube/config;fi };kubeSetConfig'

# virtual machine
alias vmn='orb create'
alias vms='orb list'
alias vmi='orb -u root'
alias vmc='orb config'
alias vmd='orb delete'
# container
alias cts='docker ps'
function cti() {
    docker exec -it "$1" /bin/bash
}
# Download by proxy
function ctl() {
  # $1 如果包含 "."， 判断为携带完整域名， 直接下载
  if [[ "$1" == *.* ]]; then
    docker pull $1
  else
    proxyUrl=dockerpull.com/$1
    docker pull $proxyUrl
    docker tag $proxyUrl $1
    docker rmi $proxyUrl
  fi
}

# colors man
function man()
{
    env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
    man "$@"
}
# 命令行启用vim模式
#set -o vi

# add route
# sudo route add 10.0.0.0/8 10.176.120.254


export EDITOR=nvim
export FZF_DEFAULT_OPTS=--reverse
#export NACOS_ADDR=10.122.73.49:7000
#export NACOS_NAMESPACE=yangyj13

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

nvm use v18.20.4 > /dev/null 2>&1
# nvm use v16.20.2 > /dev/null 2>&1
# alias npm=pnpm
export NODE_OPTIONS=--openssl-legacy-provider
typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet

# vi-mode
bindkey '^v' edit-command-line
bindkey -v
function zle-keymap-select {
	if [[ ${KEYMAP} == vicmd ]] || [[ $1 = 'block' ]]; then
		echo -ne '\e[1 q'
	elif [[ ${KEYMAP} == main ]] || [[ ${KEYMAP} == viins ]] || [[ ${KEYMAP} = '' ]] || [[ $1 = 'beam' ]]; then
		echo -ne '\e[5 q'
  fi
}
zle -N zle-keymap-select
# Use beam shape cursor on startup.
echo -ne '\e[5 q'

# Use beam shape cursor for each new prompt.
preexec() {
	echo -ne '\e[5 q'
}

_fix_cursor() {
	echo -ne '\e[5 q'
}
precmd_functions+=(_fix_cursor)

#function zle-line-init zle-keymap-select {
  #zle reset-prompt
#}
# zle -N zle-line-init
#zle -N zle-keymap-select

bindkey '^k' vi-cmd-mode # <C-k> for going to command mode
bindkey -M vicmd ' ' execute-named-cmd # Space for command line mode
bindkey -a '^[[3~' vi-delete-char
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down


# 解决复制粘贴出现很慢情况 (autosuggestions)
pasteinit() {
OLD_SELF_INSERT=${${(s.:.)widgets[self-insert]}[2,3]}
 zle -N self-insert url-quote-magic
}

pastefinish() {
 zle -N self-insert $OLD_SELF_INSERT
}
 
zstyle :bracketed-paste-magic paste-init pasteinit
zstyle :bracketed-paste-magic paste-finish pastefinish

# WQYMgsVAWQYMgsVuto tmux ssh hostname window title that actually works
ssh() {
  tmux rename-window "$*"
  command ssh "$@"
  tmux setw automatic-rename on
}

# https://starship.rs
# eval "$(starship init zsh)"
# export STARSHIP_CONFIG=$HOME/.config/zsh/starship.toml



# pnpm
export PNPM_HOME="/Users/yelog/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

# Created by `pipx` on 2023-12-04 09:45:52
export PATH="$PATH:/Users/yelog/.local/bin"

# Created by `pipx` on 2023-12-04 09:45:56
export PATH="$PATH:/Users/yelog/Library/Python/3.10/bin"

# set -gx DYLD_LIBRARY_PATH /opt/homebrew/Cellar/imagemagick/7.1.1-39/lib  # check your imagemagic installation path; this resolve dyld loading failure

# CodeWhisperer post block. Keep at the bottom of this file.
[[ -f "${HOME}/Library/Application Support/codewhisperer/shell/zshrc.post.zsh" ]] && builtin source "${HOME}/Library/Application Support/codewhisperer/shell/zshrc.post.zsh"

export GIT_TERMINAL_PROMPT=1
export GOPRIVATE=github.com/yelog/*

export DENO_INSTALL="/Users/yelog/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"
#
# # 定义一个函数来检查 tmux 会话
# function attach_or_create_tmux_session() {
#   # 检查是否在 tmux 内，如果是则不做任何事情
#   if [ -n "$TMUX" ]; then
#     return
#   fi
#
#   # 延迟执行以确保终端已完全初始化
#   sleep 0.5
#
#   # 检查是否有名为 "daily" 的 tmux 会话
#   if tmux has-session -t daily 2>/dev/null; then
#     # 如果有则直接进入该会话
#     tmux attach-session -t daily
#   else
#     # 如果没有则创建新的 tmux 会话并进入
#     tmux new-session -s daily
#   fi
# }
#
# # 使用 precmd_functions 数组注册函数
# precmd_functions+=(attach_or_create_tmux_session)

# Usage ? Undo the last commit
?() {
  gh copilot suggest -t shell "$@"
}
generate_command() {
  local current_line="${BUFFER}"
  # echo "$current_line"
  # zle -M "Generating command..."
  # change buffer is gh copilot suggest "$current_line"
  # BUFFER=$(gh copilot suggest "$current_line")
  # 修改当前命令为 gh copilot suggest "$current_line" 并执行
  BUFFER="? \"$current_line\""
  zle accept-line
}

# 将函数注册为 zle 小部件
zle -N generate_command

# 绑定快捷键
bindkey '^g' generate_command

# alias tn='tmux new -s '
# alias ta='tmux a'
# 重写 ta, 查询是否有 daily 会话，有则进入，没有则创建
function ta() {
  if tmux has-session -t daily 2>/dev/null; then
    tmux attach-session -t daily
  else
    tmux new-session -s daily
  fi
}

# neovim image.nvim
export DYLD_FALLBACK_LIBRARY_PATH="$(brew --prefix)/lib:$DYLD_FALLBACK_LIBRARY_PATH"

source /Users/yelog/Repos/marlonrichert/zsh-autocomplete/zsh-autocomplete.plugin.zsh
